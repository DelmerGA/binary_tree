var search_data = {"index":{"searchIndex":["binarytree","iterator","bfs_each()","bfs_each_with_level()","child_count()","children()","count()","each()","get_first()","height()","include?()","insert()","leaf?()","levels()","new()","post_each()","pre_each()","to_arr()"],"longSearchIndex":["binarytree","iterator","iterator#bfs_each()","iterator#bfs_each_with_level()","binarytree#child_count()","binarytree#children()","binarytree#count()","iterator#each()","binarytree#get_first()","binarytree#height()","binarytree#include?()","binarytree#insert()","binarytree#leaf?()","binarytree#levels()","binarytree::new()","iterator#post_each()","iterator#pre_each()","binarytree#to_arr()"],"info":[["BinaryTree","","BinaryTree.html","","<p>This class represents a <strong>sorted</strong> tree with <em>exactly</em>\n<em>two</em> <em>subtrees</em>. Follow the link for more info on Sorted …\n"],["Iterator","","Iterator.html","",""],["bfs_each","Iterator","Iterator.html#method-i-bfs_each","(&block)",""],["bfs_each_with_level","Iterator","Iterator.html#method-i-bfs_each_with_level","(&block)",""],["child_count","BinaryTree","BinaryTree.html#method-i-child_count","()",""],["children","BinaryTree","BinaryTree.html#method-i-children","()",""],["count","BinaryTree","BinaryTree.html#method-i-count","()",""],["each","Iterator","Iterator.html#method-i-each","(&block)","<p>an in order depth first iteration through the tree\n"],["get_first","BinaryTree","BinaryTree.html#method-i-get_first","(search_val)","<p>will find the first subtree whose value matches <code>search_val</code>\n"],["height","BinaryTree","BinaryTree.html#method-i-height","()","<p>Will calculate the height of  a BinaryTree by traversing  each level of the\ntree to find  the max_level …\n"],["include?","BinaryTree","BinaryTree.html#method-i-include-3F","(val)","<p>A method to check if <code>val</code> is in tree that returns\n<code>true</code> if in the tree  and <code>false</code> if not.\n"],["insert","BinaryTree","BinaryTree.html#method-i-insert","(new_val)","<p>will determine where to place a new <code>val</code>: @value, @left, or\n@right.\n<p>If the instance already has a <code>#value</code> …\n"],["leaf?","BinaryTree","BinaryTree.html#method-i-leaf-3F","()","<p>helper method to check if both  +@left+ and +@right+ subtrees are\n<code>nil</code>\n"],["levels","BinaryTree","BinaryTree.html#method-i-levels","()",""],["new","BinaryTree","BinaryTree.html#method-c-new","(val=nil)","<p>Creates a new binary tree  with the optional <code>val</code> param  as the\n@value for the instance\n\n<pre>my_tree = BinaryTree.new ...</pre>\n"],["post_each","Iterator","Iterator.html#method-i-post_each","(&block)","<p>a post-order depth first traversal of the tree\n"],["pre_each","Iterator","Iterator.html#method-i-pre_each","(&block)","<p>an iterative pre-order depth first traversal\n"],["to_arr","BinaryTree","BinaryTree.html#method-i-to_arr","()","<p>method to convert the tree to a sorted array\n"]]}}