var search_data = {"index":{"searchIndex":["binarytree","height()","include?()","insert()","leaf?()","new()","to_arr()"],"longSearchIndex":["binarytree","binarytree#height()","binarytree#include?()","binarytree#insert()","binarytree#leaf?()","binarytree::new()","binarytree#to_arr()"],"info":[["BinaryTree","","BinaryTree.html","","<p>This class represents a <strong>sorted</strong> tree with <em>exactly</em>\n<em>two</em> <em>subtrees</em>. Follow the link for more info on Sorted …\n"],["height","BinaryTree","BinaryTree.html#method-i-height","()","<p>Will calculate the height of  a BinaryTree by traversing  each sub-tree\n"],["include?","BinaryTree","BinaryTree.html#method-i-include-3F","(val)","<p>A method to check if <code>val</code> is in tree that returns\n<code>true</code> if in the tree  and <code>false</code> if not.\n"],["insert","BinaryTree","BinaryTree.html#method-i-insert","(val)","<p>will determine where to place a new <code>val</code>: @value, @left, or\n@right.\n<p>If the instance already has a <code>#value</code> …\n"],["leaf?","BinaryTree","BinaryTree.html#method-i-leaf-3F","()","<p>helper method to check if both  +@left+ and +@right+ subtrees are\n<code>nil</code>\n"],["new","BinaryTree","BinaryTree.html#method-c-new","(val=nil)","<p>Creates a new binary tree  with the optional <code>val</code> param  as the\n@value for the instance\n\n<pre>my_tree = BinaryTree.new ...</pre>\n"],["to_arr","BinaryTree","BinaryTree.html#method-i-to_arr","()","<p>method to convert the tree to a sorted array\n"]]}}